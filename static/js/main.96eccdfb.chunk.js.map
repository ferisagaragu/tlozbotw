{"version":3,"sources":["core/enums/material-reducer.enum.ts","imports/react-redux.import.js","shared/life-indicator.shared.tsx","shared/swal.shared.ts","core/models/material.model.ts","shared/firebase.shared.ts","core/actions/material.actions.ts","core/http/material.service.ts","modules/inventory/material/material.component.tsx","modules/inventory/inventory.view.tsx","modules/app.tsx","serviceWorker.js","shared/redux-declarations.shared.ts","core/reducers/material.reducers.ts","config/app.config.js","index.tsx"],"names":["ExampleEnum","Provider","react_redux","connect","LifeIndicator","id","lifes","_this","this","length","map","life","react_default","a","createElement","key","alt","src","width","height","Fragment","swal","withReactContent","Swal","toast","iconType","title","mixin","position","showConfirmButton","timer","fire","type","MaterialModel","data","Object","classCallCheck","name","description","img","uses","value","assign","Firebase","email","password","errorFunction","firebase","auth","createUserWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","onLogIn","onError","signInWithEmailAndPassword","then","onAuthStateChanged","user","onSignIn","provider","GoogleAuthProvider","signInWithPopup","result","token","credential","accessToken","onSignOut","signOut","path","onFunction","database","ref","child","on","snapshot","remove","update","set","materialService","MaterialService","pathBase","val","MaterialComponent","props","possibleConstructorReturn","getPrototypeOf","call","materials","lifeIndicator","keyUsages","getMaterials","_this2","Array","isArray","property","concat","_this3","material","Col","md","className","JSON","stringify","Card","Header","Body","ListGroup","variant","Item","heartSymbol","renderUses","Footer","Row","renderData","Component","MaterialComponentConnect","state","dispatch","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","payload","SET_MATERIALS","stop","_x","apply","arguments","InventoryView","material_component","App","Navbar","bg","Brand","Container","inventory_view","Boolean","window","location","hostname","match","reducers","combineReducers","undefined","action","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96eccdfb.chunk.js","sourcesContent":["export enum ExampleEnum {\r\n  SET_MATERIALS = 'setMaterials'\r\n}","import * as react_redux from 'react-redux';\r\n\r\nexport const { Provider, connect } = react_redux;\r\n","import React from 'react';\r\n\r\nclass LifeIndicator {\r\n \r\n  id: number = 0;\r\n\r\n  public heartSymbol(lifes: number[]): any {\r\n    if (lifes.length !== 0) {\r\n      return lifes.map((life: number) => {\r\n        this.id++;\r\n        switch (life) {\r\n          case .25: return <img key={this.id} alt=\"heart\" src=\"https://firebasestorage.googleapis.com/v0/b/tlozbotw-240a7.appspot.com/o/core%2Flife_1_4.png?alt=media&token=32dfbf4d-7f97-4cd6-b921-71a5155ee986\" width=\"18\" height=\"14\"/>;\r\n          case .50: return <img key={this.id} alt=\"heart\" src=\"https://firebasestorage.googleapis.com/v0/b/tlozbotw-240a7.appspot.com/o/core%2Flife_1_2.png?alt=media&token=016917b3-73b4-42fe-8ba9-e6a4abd13166\" width=\"18\" height=\"14\"/>;\r\n          case 1: return <img key={this.id} alt=\"heart\" src=\"https://firebasestorage.googleapis.com/v0/b/tlozbotw-240a7.appspot.com/o/core%2Flife_1.png?alt=media&token=9e47fbde-a5aa-4b9a-8171-5697c9849c92\" width=\"18\" height=\"14\"/>;\r\n          default: return <></>;\r\n        }\r\n      });\r\n    } else {\r\n      return <b>Material</b>;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default LifeIndicator;","import Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\n \r\nconst swal = withReactContent(Swal);\r\n\r\nexport const toast = (iconType: \"success\" | \"error\" | \"warning\" | \"info\" | \"question\" , title: string) => {\r\n  const Toast = swal.mixin({\r\n    toast: true,\r\n    position: 'top-end',\r\n    showConfirmButton: false,\r\n    timer: 3000\r\n  });\r\n    \r\n  Toast.fire({\r\n  type: iconType,\r\n  title: title\r\n  });\r\n}\r\n\r\nexport default swal;","export class MaterialModel {\r\n\r\n  name: string;\r\n  description: string;\r\n  img: string;\r\n  uses: Array<string>;\r\n  value: string;\r\n  life: Array<number>;\r\n\r\n  constructor(data: any | MaterialModel) {\r\n    this.name = '';\r\n    this.description = '';\r\n    this.img = '';\r\n    this.uses = [];\r\n    this.value = '';\r\n    this.life = [];\r\n    Object.assign(this, data);\r\n  }\r\n}","import firebase from 'firebase';\r\n\r\nclass Firebase {\r\n\r\n  //REGIST AND LOGIN WHIT EMAIL\r\n  public createUserWithEmailAndPassword(email: string, password: string, errorFunction?: Function | undefined): void {\r\n    firebase.auth().createUserWithEmailAndPassword(email, password).catch((error) => {\r\n      const errorCode = error.code;\r\n      const errorMessage = error.message;\r\n      if (errorFunction) {\r\n        errorFunction(errorCode, errorMessage);\r\n      }\r\n    });\r\n  }\r\n\r\n  public signInWithEmailAndPassword(email: string, password: string, onLogIn: Function, onError?: Function | undefined): void {\r\n    let errorCode: string = '';\r\n    let errorMessage: string = '';\r\n    \r\n    firebase.auth().signInWithEmailAndPassword(email, password).catch((error) => {\r\n      errorCode = error.code;\r\n      errorMessage = error.message;\r\n\r\n      if (onError) {\r\n        onError(errorCode, errorMessage);\r\n      }\r\n    }).then(() =>{\r\n      if (!errorCode) {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n          if (!errorCode) {\r\n            onLogIn(user);\r\n          } \r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //REGIST AND LOGIN WHIT GEMAIL\r\n  public signInWithGooglePopup(onSignIn: Function, onError?: Function | undefined): void {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    firebase.auth().signInWithPopup(provider).then((result: any) => {\r\n      const token = result.credential.accessToken;\r\n      const user = result.user;\r\n      onSignIn(token, user);\r\n    }).catch(function(error) {\r\n      const errorCode = error.code;\r\n      const errorMessage = error.message;\r\n      if (onError) {\r\n        onError(errorCode, errorMessage);\r\n      }\r\n    });\r\n  }\r\n\r\n  public signOut(onSignOut: Function, onError?: Function | undefined): void {\r\n    firebase.auth().signOut().then(() => {\r\n      onSignOut();\r\n    }).catch(function(error) {\r\n      if (onError) {\r\n        onError();\r\n      }\r\n    });\r\n  }\r\n\r\n  //CALL DATA\r\n  public on(path: string, onFunction: Function): void {\r\n    firebase.database().ref().child(path).on('value',(snapshot: any) => {\r\n      onFunction(snapshot);\r\n    });\r\n  }\r\n\r\n  public remove(path: string, errorFunction?: Function | undefined): void {\r\n    firebase.database().ref().child(path).remove((error) => {\r\n      if (errorFunction) {\r\n        errorFunction(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  public update(path: string,data: any, errorFunction?: Function | undefined): void {\r\n    firebase.database().ref(path).update(data,(error) => {\r\n      if (errorFunction) {\r\n        errorFunction(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  public set(path: string,data: any, errorFunction?: Function | undefined): void {\r\n    firebase.database().ref(path).set(data,(error) => {\r\n      if (errorFunction) {\r\n        errorFunction(error);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default Firebase;","import { ExampleEnum } from '../enums/material-reducer.enum';\r\nimport { toast } from '../../shared/swal.shared';\r\nimport { Action } from '../interfaces/action.interface';\r\nimport MaterialService from '../http/material.service';\r\nimport { MaterialModel } from '../models/material.model';\r\n\r\nconst materialService: MaterialService = new MaterialService();\r\n\r\nexport function setMaterials(payload: Array<MaterialModel>): Action {\r\n  return {type: ExampleEnum.SET_MATERIALS, payload};\r\n}\r\n\r\nexport function getMaterials(): Function {\r\n  return async (dispatch: Function) => {\r\n    materialService.getMaterials((materials: Array<MaterialModel>) => {\r\n      dispatch(setMaterials(materials));\r\n      toast('warning', 'Datos actualizados desde Firebase');\r\n    });\r\n  };\r\n};\r\n\r\n","import { MaterialModel } from \"../models/material.model\";\r\nimport Firebase from \"../../shared/firebase.shared\";\r\n\r\n\r\nclass MaterialService {\r\n\r\n  pathBase: string;\r\n  firebase: Firebase;\r\n\r\n  constructor() {\r\n    this.pathBase = 'core/material';\r\n    this.firebase = new Firebase();\r\n  }\r\n\r\n  public getMaterials(on: Function): void {\r\n    this.firebase.on(this.pathBase,(snapshot: any) => {\r\n      on(snapshot.val().map((data: any) => (new MaterialModel(data))));\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default MaterialService;","import React, { Component, ReactElement } from 'react';\r\nimport { Row, Col, Card, ListGroup } from 'react-bootstrap';\r\nimport { MaterialModel } from '../../../core/models/material.model';\r\nimport LifeIndicator from '../../../shared/life-indicator.shared';\r\nimport { connect } from '../../../imports/react-redux.import';\r\nimport { getMaterials } from '../../../core/actions/material.actions';\r\n\r\nclass MaterialComponent extends Component<any,any> {\r\n  \r\n  private materials: Array<MaterialModel>;\r\n  private lifeIndicator: LifeIndicator;\r\n\r\n  private keyUsages: number;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    \r\n    this.materials = [];\r\n    this.keyUsages = 0;\r\n    this.lifeIndicator = new LifeIndicator();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMaterials();\r\n  }\r\n\r\n  private renderUses(uses: string[]): ReactElement {\r\n    return (\r\n      <ul>\r\n        { \r\n          Array.isArray(uses) ?\r\n            uses.map((property: string) => {\r\n              this.keyUsages++;\r\n              return (\r\n                <li \r\n                  key={ `uses-material-${this.keyUsages}` } \r\n                >\r\n                  { property } \r\n                </li>\r\n              );\r\n            })\r\n          : \r\n            <li>{ uses }</li>\r\n        }\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  private renderData(): Array<ReactElement> {\r\n    return this.materials.map((material: MaterialModel) => (\r\n      <Col md={3} className=\"mt-5\" key={JSON.stringify(material)}>\r\n        <Card className=\"card-material\">\r\n          <Card.Header className=\"card-header\">\r\n            <h3>\r\n              { material.name }\r\n              <img \r\n                className=\"float-right\"\r\n                alt={ material.name } \r\n                src={ material.img }  \r\n              />\r\n            </h3>\r\n          </Card.Header>\r\n\r\n          <Card.Body>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                { this.lifeIndicator.heartSymbol(material.life) }\r\n              </ListGroup.Item>\r\n              \r\n              <ListGroup.Item>\r\n                { this.renderUses(material.uses) }\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item>\r\n                <p>{ material.description }</p>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n\r\n          <Card.Footer className=\"card-footer\">\r\n            {\r\n              material.life.length !== 0 &&\r\n              <>\r\n                <input type=\"checkbox\" className=\"float-right\"/>\r\n\r\n                <img \r\n                  className=\"float-right\"\r\n                  width=\"50px\"\r\n                  height=\"50px\"\r\n                  alt=\"camera\"\r\n                  src=\"https://c-6rtwjumjzx7877x24lfrjujinfx2ehzwx78jhisx2ehtr.g00.gamepedia.com/g00/3_c-6ejqif.lfrjujinf.htr_/c-6RTWJUMJZX77x24myyux78x3ax2fx2flfrjujinf.hzwx78jhis.htrx2fejqif_lfrjujinf_jsx2f0x2f00x2fGtyB_Hfrjwf_Wzsj_Nhts.uslx3fajwx78ntsx3di7fg95k98969i4k0i77853506j6h82hhx26n65h.rfwpx3dnrflj_$/$/$/$/$\" \r\n                />\r\n              </> \r\n            }\r\n          </Card.Footer>\r\n        </Card>\r\n      </Col>\r\n    ));\r\n  }\r\n  \r\n  render() {\r\n    const { materials } = this.props;\r\n    this.materials = materials;\r\n\r\n    return (\r\n      <Row>\r\n        { materials ? this.renderData() : <div>Cargando datos...</div> }\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n  getMaterials: () => dispatch(getMaterials())\r\n});\r\n\r\nconst mapStateToProps = (state: any) => ({ \r\n  materials: state.materials\r\n});\r\n\r\nconst MaterialComponentConnect = connect(mapStateToProps,mapDispatchToProps)(MaterialComponent);\r\nexport default MaterialComponentConnect;","import React, { Component } from 'react';\r\nimport MaterialComponent from './material/material.component';\r\n\r\nclass InventoryView extends Component {\r\n  render() {\r\n    return (\r\n      <MaterialComponent />\r\n    );\r\n  }\r\n}\r\n\r\nexport default InventoryView;","import React, { Component } from 'react';\nimport { Container, Navbar } from 'react-bootstrap';\nimport InventoryView from './inventory/inventory.view';\n\nclass App extends Component<any,{}> {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>The Legend of Zelda Breath of the Wild CheckList</Navbar.Brand>\n        </Navbar>\n        \n        <Container>\n          <InventoryView />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { materials } from '../core/reducers/material.reducers';\r\n\r\nexport const reducers = combineReducers({\r\n  materials\r\n});\r\n  \r\nexport const initState = {\r\n  materials: null\r\n};","import { Action } from \"../interfaces/action.interface\";\r\nimport { ExampleEnum } from '../enums/material-reducer.enum';\r\n\r\nexport const materials = (state = {}, action: Action) => {\r\n  switch(action.type) {\r\n    case ExampleEnum.SET_MATERIALS: return action.payload;\r\n    default: return state;\r\n  }\r\n}","import firebase from 'firebase';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducers, initState } from '../shared/redux-declarations.shared';\r\n\r\n//FIREBASE\r\nexport const FIREBASE_AUTH = {\r\n  apiKey: \"AIzaSyAPCD6Ai9aASF4j36Sagyn8pI6JlZj3fEE\",\r\n  authDomain: \"tlozbotw-240a7.firebaseapp.com\",\r\n  databaseURL: \"https://tlozbotw-240a7.firebaseio.com\",\r\n  projectId: \"tlozbotw-240a7\",\r\n  storageBucket: \"tlozbotw-240a7.appspot.com\",\r\n  messagingSenderId: \"299245941226\",\r\n  appId: \"1:299245941226:web:c9bac6e300e32279\"\r\n};\r\n\r\nfirebase.initializeApp(FIREBASE_AUTH);\r\n\r\n//REDUX\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, initState, composeEnhancers(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from './imports/react-redux.import';\n\nimport './styles/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './modules/app';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './config/app.config';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}